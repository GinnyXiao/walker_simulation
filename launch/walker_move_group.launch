<launch>
  <arg name="debug" default="false"/>
  <arg name="info" default="$(arg debug)"/>
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="publish_monitored_planning_scene" default="true"/>
  <!-- <arg name="moveit_octomap_sensor_params_file"
            default="$(find walker_moveit_config)/config/sensors_3d.yaml" /> -->

  <arg unless="$(arg debug)" name="launch_prefix" value=""/>
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb ex --args"/>
  <arg unless="$(arg info)" name="command_args" value=""/>
  <arg     if="$(arg info)" name="command_args" value="--debug"/>

  <arg name="load_robot_description" default="true"/>
  <arg name="robot_description" default="robot_description"/>

  <!-- Load walker's universal robot description format (URDF) -->
  <!-- <param if="$(arg load_robot_description)" name="$(arg robot_description)"
        command="cat $(find wheeled_walker)/robots/wheeled_walker.xacro"/> -->
  <include file="$(find walker_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <param name="collision_detector" value="collision_detection/CollisionPluginSBPL"/>
  <rosparam command="load" file="$(find walker_planner)/config/collision_model_walker.yaml"/>

  <!-- Planning (modified from original move_group.launch) -->
  <include ns="move_group" file="$(find walker_simulation)/launch/sbpl_planning_pipeline.launch.xml"/>
  
  <!-- Action -->
  <!-- <include if="$(arg allow_trajectory_execution)"
          ns="move_group"
          file="$(find walker_moveit_config)/launch/trajectory_execution.launch.xml">
      <arg name="moveit_controller_manager" value="wheeled_walker" unless="$(arg fake_execution)"/>
      <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
      <arg name="moveit_manage_controllers" value="true"/>
  </include> -->
  <include if="$(arg allow_trajectory_execution)" 
           ns="move_group" 
           file="$(find walker_moveit_config)/launch/trajectory_execution.launch.xml">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="wheeled_walker" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Perception -->
  <!-- <include if="$(arg allow_trajectory_execution)"
          ns="move_group"
          file="$(find walker_moveit_config)/launch/sensor_manager.launch.xml">
      <arg name="moveit_sensor_manager" value="wheeled_walker" />
      <arg name="moveit_octomap_sensor_params_file" value="$(arg moveit_octomap_sensor_params_file)"/>
  </include> -->
  <include ns="move_group" file="$(find walker_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="wheeled_walker" />
  </include>

  <!-- Executive -->
  <node name="move_group"
        launch-prefix="$(arg launch_prefix)"
        pkg="moveit_ros_move_group"
        type="move_group"
        respawn="false"
        args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)"/>

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="0.05"/>

    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
                move_group/MoveGroupExecuteService
                move_group/MoveGroupKinematicsService
                move_group/MoveGroupMoveAction
                move_group/MoveGroupPickPlaceAction
                move_group/MoveGroupPlanService
                move_group/MoveGroupQueryPlannersService
                move_group/MoveGroupStateValidationService
                move_group/MoveGroupGetPlanningSceneService"/>

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)"/>
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)"/>
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)"/>
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)"/>
  </node>

</launch>